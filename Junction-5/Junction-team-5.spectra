import "./patterns/DwyerPatternsNamed.spectra"

spec JunctionModule

// *********************************************
// *** define type of all possible vehicles  ***
// *********************************************

type Vehicle = {NONE, CAR, EMERGENCY};

// ****************************************************************************************
// *** cars arrays env variables, index 0 - right , index 1 - straight , index 2 - left ***
// ****************************************************************************************

env Vehicle[3] vehiclesNorth;
env Vehicle[3] vehiclesSouth;

// ************************************************************
// *** pedestrians arrays env variables                     ***
// *** for south and north: index 0 - west , index 1 - east ***
// *** for east and west: index 0 - north , index 1 - south ***
// ************************************************************

env boolean[2] pedestriansNorthPressed;
env boolean[2] pedestriansSouthPressed;
env boolean[2] pedestriansEastPressed;
env boolean[2] pedestriansWestPressed;

// ***********************************************
// *** special climate heavy fog env variable ***
// ***********************************************

env boolean foggy;

// *********************************************
// *** north road constructions env variable ***
// *********************************************

env boolean roadConstructions;

// *******************************************************************************************************
// *** cars traffic lights arrays sys variables, index 0 - right , index 1 - straight , index 2 - left ***
// *******************************************************************************************************

sys boolean[3] greenNorthVehicles;
sys boolean[3] greenSouthVehicles;

// ************************************************************
// *** pedestrians traffic lights arrays sys variables      ***
// *** for south and north: index 0 - west , index 1 - east ***
// *** for east and west: index 0 - north , index 1 - south ***
// ************************************************************

sys boolean[2] greenNorthPedestrians;
sys boolean[2] greenSouthPedestrians;
sys boolean[2] greenEastPedestrians;
sys boolean[2] greenWestPedestrians;

// ******************************************

env boolean freezeMode;
env boolean manualMode;

// ***************** Defines *****************
define right_lane := 0;
define straight_lane := 1;
define left_lane := 2;

define north := 0;
define south := 1;
define west := 0;
define east := 1;

//---------------------------------------------- Implementation from here ----------------------------------------------
//----------------------------------------------------------------------------------------------------------------------

// North right lane logic
gar alw !greenWestPedestrians[north] & !greenNorthPedestrians[west] & vehiclesNorth[right_lane] != NONE -> 
		greenNorthVehicles[right_lane];
		
gar alw greenWestPedestrians[north] | greenNorthPedestrians[west] | vehiclesNorth[right_lane] = NONE -> 
		!greenNorthVehicles[right_lane];

// North straight lane logic
gar alw !greenSouthPedestrians[west] & !greenNorthPedestrians[west] & !greenSouthVehicles[left_lane] &
		vehiclesNorth[straight_lane] != NONE -> greenNorthVehicles[straight_lane];
		
gar alw greenSouthPedestrians[west] | greenNorthPedestrians[west] | greenSouthVehicles[left_lane] |
		vehiclesNorth[straight_lane] = NONE -> !greenNorthVehicles[straight_lane];

// North left lane logic
gar alw !greenEastPedestrians[south] & !greenNorthPedestrians[west] & !greenSouthVehicles[straight_lane] &
		!greenSouthVehicles[left_lane] & vehiclesNorth[left_lane] != NONE -> greenNorthVehicles[left_lane];
		
gar alw greenEastPedestrians[south] | greenNorthPedestrians[west] | greenSouthVehicles[straight_lane] |
		greenSouthVehicles[left_lane] | vehiclesNorth[left_lane] = NONE -> !greenNorthVehicles[left_lane];

		
// South right lane logic
gar alw !greenEastPedestrians[south] & !greenSouthPedestrians[east] & vehiclesSouth[right_lane] != NONE -> 
		greenSouthVehicles[right_lane];
		
gar alw greenEastPedestrians[south] | greenSouthPedestrians[east] | vehiclesSouth[right_lane] = NONE -> 
		!greenSouthVehicles[right_lane];


// South straight lane logic
gar alw !greenNorthPedestrians[east] & !greenSouthPedestrians[east] & !greenNorthVehicles[left_lane] &
		vehiclesSouth[straight_lane] != NONE -> greenSouthVehicles[straight_lane];
		
gar alw greenNorthPedestrians[east] | greenSouthPedestrians[east] | greenNorthVehicles[left_lane] |
		vehiclesSouth[straight_lane] = NONE -> !greenSouthVehicles[straight_lane];

		
// South left lane logic
gar alw !greenWestPedestrians[north] & !greenSouthPedestrians[east] & !greenNorthVehicles[straight_lane] &
		!greenNorthVehicles[left_lane] & vehiclesSouth[left_lane] != NONE -> greenSouthVehicles[left_lane];
		
gar alw greenWestPedestrians[north] | greenSouthPedestrians[east] | greenNorthVehicles[straight_lane] |
		greenNorthVehicles[left_lane] | vehiclesSouth[left_lane] = NONE -> !greenSouthVehicles[left_lane];
		
						
gar alw greenEastPedestrians[north];
gar alw greenWestPedestrians[south];


// North-West pedestrian side walk logic
gar alw !greenNorthVehicles[right_lane] & !greenNorthVehicles[straight_lane] & !greenNorthVehicles[left_lane] &
		pedestriansNorthPressed[west] -> greenNorthPedestrians[west];
gar alw greenNorthVehicles[right_lane] | greenNorthVehicles[straight_lane] | greenNorthVehicles[left_lane] |
		!pedestriansNorthPressed[west] -> !greenNorthPedestrians[west];

// South-West pedestrian side walk logic
gar alw !greenNorthVehicles[straight_lane] & pedestriansSouthPressed[west] -> greenSouthPedestrians[west];
gar alw greenNorthVehicles[straight_lane] | !pedestriansSouthPressed[west] -> !greenSouthPedestrians[west];

// South-East pedestrian side walk logic
gar alw !greenSouthVehicles[right_lane] & !greenSouthVehicles[straight_lane] & !greenSouthVehicles[left_lane] &
		pedestriansSouthPressed[east] -> greenSouthPedestrians[east];
gar alw greenSouthVehicles[right_lane] | greenSouthVehicles[straight_lane] | greenSouthVehicles[left_lane] |
		!pedestriansSouthPressed[east] -> !greenSouthPedestrians[east];

// North-East pedestrian side walk logic
gar alw !greenSouthVehicles[straight_lane] & pedestriansNorthPressed[east] -> greenNorthPedestrians[east];
gar alw greenSouthVehicles[straight_lane] | !pedestriansNorthPressed[east] -> !greenNorthPedestrians[east];

// West-North pedestrian side walk logic
gar alw !greenNorthVehicles[right_lane] & !greenSouthVehicles[left_lane] & pedestriansWestPressed[north] ->
		greenWestPedestrians[north];
gar alw greenNorthVehicles[right_lane] | greenSouthVehicles[left_lane] | !pedestriansWestPressed[north] ->
		!greenWestPedestrians[north];

// East-South pedestrian side walk logic
gar alw !greenNorthVehicles[left_lane] & !greenSouthVehicles[right_lane] & pedestriansEastPressed[south] ->
		greenEastPedestrians[south];
gar alw greenNorthVehicles[left_lane] | greenSouthVehicles[right_lane] | !pedestriansEastPressed[south] ->
		!greenEastPedestrians[south];
		
// ========================== Assume there will always be a traffic at some point ==========================

asm alwEv vehiclesNorth[left_lane] != NONE;
asm alwEv vehiclesNorth[straight_lane] != NONE;
asm alwEv vehiclesNorth[right_lane] != NONE;
asm alwEv vehiclesSouth[left_lane] != NONE;
asm alwEv vehiclesSouth[straight_lane] != NONE;
asm alwEv vehiclesSouth[right_lane] != NONE;

asm alwEv pedestriansEastPressed[north];
asm alwEv pedestriansEastPressed[south];
asm alwEv pedestriansWestPressed[north];
asm alwEv pedestriansWestPressed[south];
asm alwEv pedestriansNorthPressed[west];
asm alwEv pedestriansNorthPressed[east];
asm alwEv pedestriansSouthPressed[west];
asm alwEv pedestriansSouthPressed[east];

// ========================== Assume there will not always be traffic ==========================

asm alwEv vehiclesNorth[left_lane] = NONE;
asm alwEv vehiclesNorth[straight_lane] = NONE;
asm alwEv vehiclesNorth[right_lane] = NONE;
asm alwEv vehiclesSouth[left_lane] = NONE;
asm alwEv vehiclesSouth[straight_lane] = NONE;
asm alwEv vehiclesSouth[right_lane] = NONE;

asm alwEv !pedestriansEastPressed[north];
asm alwEv !pedestriansEastPressed[south];
asm alwEv !pedestriansWestPressed[north];
asm alwEv !pedestriansWestPressed[south];
asm alwEv !pedestriansNorthPressed[west];
asm alwEv !pedestriansNorthPressed[east];
asm alwEv !pedestriansSouthPressed[west];
asm alwEv !pedestriansSouthPressed[east];


// ========================== Avoid traffic starvation ==========================

gar alwEv vehiclesNorth[right_lane] != NONE & greenNorthVehicles[right_lane];
gar alwEv vehiclesNorth[straight_lane] != NONE & greenNorthVehicles[straight_lane];
gar alwEv vehiclesNorth[left_lane] != NONE & greenNorthVehicles[left_lane];
gar alwEv vehiclesSouth[right_lane] != NONE & greenSouthVehicles[right_lane];
gar alwEv vehiclesSouth[straight_lane] != NONE & greenSouthVehicles[straight_lane];
gar alwEv vehiclesSouth[left_lane] != NONE & greenSouthVehicles[left_lane];

gar alwEv pedestriansEastPressed[south] & greenEastPedestrians[south];
gar alwEv pedestriansWestPressed[north] & greenWestPedestrians[north];
gar alwEv pedestriansNorthPressed[west] & greenNorthPedestrians[west];
gar alwEv pedestriansNorthPressed[east] & greenNorthPedestrians[east];
gar alwEv pedestriansSouthPressed[west] & greenSouthPedestrians[west];
gar alwEv pedestriansSouthPressed[east] & greenSouthPedestrians[east];

// ========================== Pedestrians wait until there is a green light ==========================

asm alw pedestriansNorthPressed[west] & !greenNorthPedestrians[west] -> next(pedestriansNorthPressed[west]);
asm alw pedestriansNorthPressed[east] & !greenNorthPedestrians[east] -> next(pedestriansNorthPressed[east]);

asm alw pedestriansSouthPressed[west] & !greenSouthPedestrians[west] -> next(pedestriansSouthPressed[west]);
asm alw pedestriansSouthPressed[east] & !greenSouthPedestrians[east] -> next(pedestriansSouthPressed[east]);

asm alw pedestriansWestPressed[north] & !greenWestPedestrians[north] -> next(pedestriansWestPressed[north]);
asm alw pedestriansWestPressed[south] & !greenWestPedestrians[south] -> next(pedestriansWestPressed[south]);

asm alw pedestriansEastPressed[north] & !greenEastPedestrians[north] -> next(pedestriansEastPressed[north]);
asm alw pedestriansEastPressed[south] & !greenEastPedestrians[south] -> next(pedestriansEastPressed[south]);

// ========================== Vehicles wait until there is a green light ==========================

asm alw vehiclesNorth[right_lane] != NONE & !greenNorthVehicles[right_lane] -> 
		next(vehiclesNorth[right_lane]) = vehiclesNorth[right_lane];
asm alw vehiclesNorth[straight_lane] != NONE & !greenNorthVehicles[straight_lane] -> 
		next(vehiclesNorth[straight_lane]) = vehiclesNorth[straight_lane];
asm alw vehiclesNorth[left_lane] != NONE & !greenNorthVehicles[left_lane] -> 
		next(vehiclesNorth[left_lane]) = vehiclesNorth[left_lane];

asm alw vehiclesSouth[right_lane] != NONE & !greenSouthVehicles[right_lane] -> 
		next(vehiclesSouth[right_lane]) = vehiclesSouth[right_lane];
asm alw vehiclesSouth[straight_lane] != NONE & !greenSouthVehicles[straight_lane] -> 
		next(vehiclesSouth[straight_lane]) = vehiclesSouth[straight_lane];
asm alw vehiclesSouth[left_lane] != NONE & !greenSouthVehicles[left_lane] -> 
		next(vehiclesSouth[left_lane]) = vehiclesSouth[left_lane];

// ========================== Emergency priorities ==========================

// South right lane emergency vehicle has priority over south-east and east-south pedestrians
gar alw vehiclesSouth[right_lane] = EMERGENCY -> !greenEastPedestrians[south] & !greenSouthPedestrians[east];

// North right lane emergency vehicle has priority over north-west and west-north pedestrians
gar alw vehiclesNorth[right_lane] = EMERGENCY -> !greenWestPedestrians[north] & !greenNorthPedestrians[west];

// South straight lane emergency vehicle has priority over north left lane vehicle, south-east and north-east pedestrians
gar alw vehiclesSouth[straight_lane] = EMERGENCY ->
		!greenNorthVehicles[left_lane] & !greenSouthPedestrians[east] & !greenNorthPedestrians[east];

// North straight lane emergency vehicle has priority over south left lane vehicle, south-west and north-west pedestrians
gar alw vehiclesNorth[straight_lane] = EMERGENCY ->
		!greenSouthVehicles[left_lane] & !greenSouthPedestrians[west] & !greenNorthPedestrians[west];

// South left lane emergency vehicle has priority over north straight lane non-emergency vehicle, north left lane emergency vehicle, 
// and south-east and west-north pedestrians 
gar alw vehiclesSouth[left_lane] = EMERGENCY & vehiclesNorth[straight_lane] != EMERGENCY -> 
		!greenNorthVehicles[straight_lane] & !greenNorthVehicles[left_lane] & !greenSouthPedestrians[east] & !greenWestPedestrians[north];

// North left lane emergency vehicle has priority over south straight and left lanes non-emergency vehicles, 
// and north-west and east-south pedestrians 		
gar alw vehiclesNorth[left_lane] = EMERGENCY & vehiclesSouth[straight_lane] != EMERGENCY & vehiclesSouth[left_lane] != EMERGENCY -> 
		!greenSouthVehicles[straight_lane] & !greenSouthVehicles[left_lane] & !greenNorthPedestrians[west] & !greenEastPedestrians[south];
		
// ============================ deprecated ============================


//This triggers are now unrealizable - I think because of the <-> we added. It is possible that there will be for example 
// 4 consecutive states with a vehicle on the same lane without any vehs or peds and thus it should stay green 4 states. 
//gar trig [true]*[greenSouthVehicles[left_lane]]{2} |=> [!greenSouthVehicles[left_lane]];
//gar trig [true]*[greenNorthVehicles[left_lane]]{2} |=> [!greenNorthVehicles[left_lane]];
//
//gar trig [true]*[greenSouthVehicles[right_lane]]{2} |=> [!greenSouthVehicles[right_lane]];
//gar trig [true]*[greenNorthVehicles[right_lane]]{2} |=> [!greenNorthVehicles[right_lane]];
//
//gar trig [true]*[greenSouthVehicles[straight_lane]]{2} |=> [!greenSouthVehicles[straight_lane]];
//gar trig [true]*[greenNorthVehicles[straight_lane]]{2} |=> [!greenNorthVehicles[straight_lane]];
//
//gar trig [true]*[greenNorthPedestrians[west]]{2} |=> [!greenNorthPedestrians[west]];
//gar trig [true]*[greenNorthPedestrians[east]]{2} |=> [!greenNorthPedestrians[east]];
//
//gar trig [true]*[greenSouthPedestrians[west]]{2} |=> [!greenSouthPedestrians[west]];
//gar trig [true]*[greenSouthPedestrians[east]]{2} |=> [!greenSouthPedestrians[east]];
//
//gar trig [true]*[greenEastPedestrians[south]]{2} |=> [!greenEastPedestrians[south]];
//
//gar trig [true]*[greenWestPedestrians[north]]{2} |=> [!greenWestPedestrians[north]];

//gar trig [true]*[pedestriansNorthPressed[west]] |=> [true]*[greenNorthPedestrians[west]];
//gar trig [true]*[pedestriansNorthPressed[east]] |=> [true]*[greenNorthPedestrians[east]];
//
//gar trig [true]*[pedestriansSouthPressed[west]] |=> [true]*[greenSouthPedestrians[west]];
//gar trig [true]*[pedestriansSouthPressed[east]] |=> [true]*[greenSouthPedestrians[east]];
//
//gar trig [true]*[pedestriansWestPressed[north]] |=> [true]*[greenWestPedestrians[north]];
//gar trig [true]*[pedestriansWestPressed[south]] |=> [true]*[greenWestPedestrians[south]];
//
//gar trig [true]*[pedestriansEastPressed[north]] |=> [true]*[greenEastPedestrians[north]];
//gar trig [true]*[pedestriansEastPressed[south]] |=> [true]*[greenEastPedestrians[south]];
//

// Used alwEv vehicle & green light together with assumption for alwEv vehicle. Works faster.
// Also originaly was defined a bit differently.
//gar trig [true]*[vehiclesNorth[right_lane] != NONE & !greenNorthVehicles[right_lane]] |=> 
//				[!greenNorthVehicles[right_lane]]*[greenNorthVehicles[right_lane]];
//				
//gar trig [true]*[vehiclesNorth[straight_lane] != NONE & !greenNorthVehicles[straight_lane]] |=> 
//				[!greenNorthVehicles[straight_lane]]*[greenNorthVehicles[straight_lane]];
//				
//gar trig [true]*[vehiclesNorth[left_lane] != NONE & !greenNorthVehicles[left_lane]] |=> 
//				[!greenNorthVehicles[left_lane]]*[greenNorthVehicles[left_lane]];
//
//gar trig [true]*[vehiclesSouth[right_lane] != NONE & !greenSouthVehicles[right_lane]] |=> 
//				[!greenSouthVehicles[right_lane]]*[greenSouthVehicles[right_lane]];
//				
//gar trig [true]*[vehiclesSouth[straight_lane] != NONE & !greenSouthVehicles[straight_lane]] |=> 
//				[!greenSouthVehicles[straight_lane]]*[greenSouthVehicles[straight_lane]];
//				
//gar trig [true]*[vehiclesSouth[left_lane] != NONE & !greenSouthVehicles[left_lane]] |=> 
//				[!greenSouthVehicles[left_lane]]*[greenSouthVehicles[left_lane]];